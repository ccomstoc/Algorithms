//Connor Comstock
#include <iostream>

using namespace std;

class Floyd{

public:
  void printArray(int arr[8][7][7], int dNum);

};

int main()
{

Floyd f;

int master[8][7][7] = {{{0,4,-1,-1,-1,10,-1},{3,0,-1,18,-1,-1,-1},{-1,6,0,-1,-1,-1,-1},{-1,5,15,0,2,19,5},{-1,-1,12,1,0,-1,-1},{-1,-1,-1,-1,-1,0,10},{-1,-1,-1,8,-1,-1,0}},{0},{0},{0},{0},{0},{0},{0}};

int p[7][7] = {0};

//key[d#][row][col]

cout << "-------D" << 0 << "-------\n";
f.printArray(master, 0);

for(int dNum = 1; dNum <= 7; dNum++){


  for(int c = 0; c < 7; c++)//set row to prevoious dim
    master[dNum][dNum-1][c] = master[dNum-1][dNum-1][c];//first dNum indicates which array, second is -1 bc of indexing
  for(int r = 0; r < 7; r++)//set colum to prevoious dim
    master[dNum][r][dNum-1] = master[dNum-1][r][dNum-1];

    for(int r = 0; r < 7; r++)
      for(int c = 0; c < 7; c++){
        if(r != (dNum-1) && c != (dNum-1) && r != c){ // acount for diagonal = 0 and dNum row/col  unchanged

          //-----Set a&b-----
          int a = master[dNum-1][r][c];

          int b;
          int b1 = master[dNum-1][r][dNum-1];
          int b2 = master[dNum-1][dNum-1][c];

          if( b1 == -1 || b2 == -1) //Simulating -1 as infinity
            b = -1;
          else
            b = b1+b2;


          //----Compare-----
          if(a == -1){//simulating infinity
            master[dNum][r][c] = b;
            p[r][c] = dNum;
          }
          else if(b == -1)//simulating infinity
            master[dNum][r][c] = a;
          else if( a < b)
            master[dNum][r][c] = a;
          else{
            master[dNum][r][c] = b;
            p[r][c] = dNum;
          }

        }
      }

      cout << "-------D" << dNum << "-------\n";
      f.printArray(master, dNum);
}
  // Print P
  cout << "-------P-------\n";
  for(int i = 0; i < 7; i ++){
    for(int j = 0; j < 7; j++)
      cout << p[i][j]<< ", ";
    cout << "\n";
  }

}
void Floyd::printArray(int arr[8][7][7], int dNum)
{
  int num;
  for(int i = 0; i < 7; i ++){
    for(int j = 0; j < 7; j++){
      num = arr[dNum][i][j];//num to print
      if(num < 10 && num != -1)//Formating
        cout << " " << num;
      else
        cout << num;
      cout << " ";
      }
      //cout << arr[dNum][i][j]<< ", ";
    cout << "\n";
  }

}
//-----Output-----

-------D0-------
 0  4 -1 -1 -1 10 -1
 3  0 -1 18 -1 -1 -1
-1  6  0 -1 -1 -1 -1
-1  5 15  0  2 19  5
-1 -1 12  1  0 -1 -1
-1 -1 -1 -1 -1  0 10
-1 -1 -1  8 -1 -1  0
-------D1-------
 0  4 -1 -1 -1 10 -1
 3  0 -1 18 -1 13 -1
-1  6  0 -1 -1 -1 -1
-1  5 15  0  2 19  5
-1 -1 12  1  0 -1 -1
-1 -1 -1 -1 -1  0 10
-1 -1 -1  8 -1 -1  0
-------D2-------
 0  4 -1 22 -1 10 -1
 3  0 -1 18 -1 13 -1
 9  6  0 24 -1 19 -1
 8  5 15  0  2 18  5
-1 -1 12  1  0 -1 -1
-1 -1 -1 -1 -1  0 10
-1 -1 -1  8 -1 -1  0
-------D3-------
 0  4 -1 22 -1 10 -1
 3  0 -1 18 -1 13 -1
 9  6  0 24 -1 19 -1
 8  5 15  0  2 18  5
21 18 12  1  0 31 -1
-1 -1 -1 -1 -1  0 10
-1 -1 -1  8 -1 -1  0
-------D4-------
 0  4 37 22 24 10 27
 3  0 33 18 20 13 23
 9  6  0 24 26 19 29
 8  5 15  0  2 18  5
 9  6 12  1  0 19  6
-1 -1 -1 -1 -1  0 10
16 13 23  8 10 26  0
-------D5-------
 0  4 36 22 24 10 27
 3  0 32 18 20 13 23
 9  6  0 24 26 19 29
 8  5 14  0  2 18  5
 9  6 12  1  0 19  6
-1 -1 -1 -1 -1  0 10
16 13 22  8 10 26  0
-------D6-------
 0  4 36 22 24 10 20
 3  0 32 18 20 13 23
 9  6  0 24 26 19 29
 8  5 14  0  2 18  5
 9  6 12  1  0 19  6
-1 -1 -1 -1 -1  0 10
16 13 22  8 10 26  0
-------D7-------
 0  4 36 22 24 10 20
 3  0 32 18 20 13 23
 9  6  0 24 26 19 29
 8  5 14  0  2 18  5
 9  6 12  1  0 19  6
26 23 32 18 20  0 10
16 13 22  8 10 26  0
-------P-------
0, 0, 5, 2, 4, 0, 6,
0, 0, 5, 0, 4, 1, 6,
2, 0, 0, 2, 4, 2, 6,
2, 0, 5, 0, 0, 2, 0,
4, 4, 0, 0, 0, 4, 4,
7, 7, 7, 7, 7, 0, 0,
4, 4, 5, 0, 4, 4, 0,
